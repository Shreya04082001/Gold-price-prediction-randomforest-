# -*- coding: utf-8 -*-
"""goldpredictionipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14QePG-Ut64W8Ysymvqv3m5LJzSKEqXCW
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

#loading the csv file
gold_data=pd.read_csv('/content/gld_price_data.csv')

gold_data.head()

gold_data.tail()

gold_data.shape

#getting info
gold_data.info()

#checking for missing values
gold_data.isnull().sum()

#getting the statistical measures of data
gold_data.describe()

#positive correlation
#negative correlation
correlation = gold_data.corr()

plt.figure(figsize=(8,8))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

#correlation values of gld
print (correlation['GLD'])

#checking the distribution of gld price
sns.distplot(gold_data['GLD'],color='green')

x=gold_data.drop(['Date','GLD'],axis=1)
y=gold_data['GLD']

print(x)

print(y)

#splitting into test data and training data
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=2)

#model training
regressor =RandomForestRegressor(n_estimators=100)

regressor.fit(x_train,y_train)

#prediction of test data
test_data_prediction=regressor.predict(x_test)
print(test_data_prediction)

#r squared error
error_score=metrics.r2_score(y_test,test_data_prediction)
print("r squared error: ",error_score)

#comparing actual and predicted values
y_test=list(y_test)

plt.plot(y_test,color='blue',label='actual value')
plt.plot(test_data_prediction,color='green',label='predicted value')
plt.title('actual price vs predicted price')
plt.ylabel('GLD price')
plt.xlabel('Number of values')
plt.legend()
plt.show()





